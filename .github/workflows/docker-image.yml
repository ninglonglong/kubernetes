# .github/workflows/build-and-push-to-acr.yml

# 1. 工作流名称
name: Build K8s Image and Push to ACR

# 2. 触发条件
on:
  # 允许手动在 Actions 页面点击 "Run workflow" 来触发
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag (e.g., dev, latest, or a version number)'
        required: true
        default: 'latest'
  # 当有代码推送到 dev 分支时自动触发
  push:
    branches:
      - 'master' # 您可以修改为您进行开发的分支名

# 3. 定义环境变量，方便统一管理
env:
  # 镜像要推送到的 ACR 命名空间
  # 要构建的 Kubernetes 组件名称
  K8S_COMPONENT: kube-scheduler
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

# 4. 定义作业
jobs:
  build-and-push:
    # 作业运行的环境
    runs-on: ubuntu-latest

    # 作业中的一系列步骤
    steps:
      # 步骤一：检出代码
      - name: Checkout Kubernetes source code
        uses: actions/checkout@v4
        with:
          # Kubernetes 源码包含子模块，需要拉取
          submodules: true
          fetch-depth: 0 
          fetch-tags: true

      # 步骤二：设置 Go 环境 (Kubernetes 构建需要)
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          # 建议指定一个与 k8s 源码匹配的 Go 版本
          go-version: '1.22'

      # 步骤三：设置 Docker Buildx (最佳实践，用于多平台构建)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步骤四：登录到阿里云 ACR
      - name: Log in to Alibaba Cloud Container Registry (ACR)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ALIYUN_REGISTRY}}
          username: ${{ env.ALIYUN_REGISTRY_USER}}
          password: ${{ env.ALIYUN_REGISTRY_PASSWORD}}

      # 步骤五：确定镜像标签
      - name: Determine Image Tag
        id: image_tag
        run: |
          # 如果是手动触发，使用输入的 tag；如果是 push 触发，使用 commit SHA 的前7位
          TAG=${{ github.event.inputs.image_tag || format('{0}', github.sha) }}
          SHORT_TAG=${TAG::7}
          echo "IMAGE_TAG=${SHORT_TAG}" >> $GITHUB_ENV
          echo "Using tag: ${SHORT_TAG}"

      # 步骤六：构建 Kubernetes 组件镜像并推送
      # 这是最核心的一步！
      - name: Build and Push Kubernetes Image
        run: |
          echo "Starting build for ${{ env.K8S_COMPONENT }}..."
          echo "Target Registry: ${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAME_SPACE }}"
          echo "Image Tag: ${{ env.IMAGE_TAG }}"

         
          export KUBE_BUILD_PLATFORMS=linux/amd64
          export KUBE_DOCKER_REGISTRY="${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAME_SPACE }}"
          export KUBE_DOCKER_IMAGE_TAG="${{ env.IMAGE_TAG }}"
          # 使用您在 workflow_dispatch 中输入的 tag，或者 commit SHA 作为强制版本号
          
          #VERSION_TAG=${{ github.event.inputs.image_tag || format('git-{0}', github.sha) }}
                # ---- 修改这里的逻辑 ----
          # 构造一个符合 SemVer 规范的开发版本号
          # 格式: 0.0.0-dev.<commit_sha>
          # 这样既保证了唯一性，又符合 SemVer

          KUBE_BUILD_PLATFORMS=linux/amd64 \
          KUBE_DOCKER_REGISTRY="${{ secrets.ACR_REGISTRY }}/${{ env.ACR_NAMESPACE }}" \
          KUBE_FASTBUILD=true \
          KUBE_BUILD_PARALLEL=1 \
          ./build/release-images.sh "${{ env.K8S_COMPONENT }}"

      # 步骤七：登出 ACR (安全起见)
      - name: Logout from ACR
        if: always() # 无论前面的步骤是否成功，都执行登出
        run: docker logout ${{ env.ALIYUN_REGISTRY }}
